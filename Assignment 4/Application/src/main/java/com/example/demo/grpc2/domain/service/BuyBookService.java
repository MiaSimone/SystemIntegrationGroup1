package com.example.demo.grpc2.domain.service;

import com.example.demo.grpc.*;
import com.example.demo.grpc2.dao.BookDAO;
import com.example.demo.grpc2.dao.StudentDAO;
import com.example.demo.grpc2.domain.entity.Book;
import com.example.demo.rest.model.Student;
import io.grpc.Status;
import org.springframework.stereotype.Service;

import java.sql.SQLException;
import java.util.NoSuchElementException;
import java.util.logging.Level;
import java.util.logging.Logger;

@Service
public class BuyBookService<StreamObserver> extends BuyBookServiceGrpc.BuyBookServiceImplBase {

    // ExamDAO instance gets access to the Exam database
    private BookDAO bookDao = new BookDAO();
    private StudentDAO studentDAO = new StudentDAO();

    private static final Logger logger = Logger.getLogger(BuyBookService.class.getName());

    // Here we override the getExamForStudent() operation initially defined in the ExamProto and autogenerated in examService class
    // The operation gets id as an input and returns theexam data fot this student id as a response
    @Override
    public void buyBook(BuyBookRequest request, io.grpc.stub.StreamObserver<BuyBookResponse> responseObserver) throws SQLException {
        // student and book is passed as a parameter of the request message
        System.out.println(request.getStudentId());
        String studentId = request.getStudentId();
        String bookId = request.getBookId();
        try
        {
            Student student = studentDAO.findById(studentId);
            System.out.println(student.getName());
            Book book = bookDao.findById(bookId);
            logger.log(Level.INFO, "REQUEST for STUDENT ID :- " + studentId + " buying book with id " + bookId);

            // gRPC provides a builder for response messages
            int studentBalance = student.getBalance();
            int price = book.getPrice();

            if (studentBalance > 0){
                if (price <= studentBalance){
                    BuyBookResponse response = BuyBookResponse.newBuilder()
                            .setResult("This student can afford to buy the book " + book.getTitle())
                            .build();
                    responseObserver.onNext(response);
                    responseObserver.onCompleted();
                } else {
                    BuyBookResponse response = BuyBookResponse.newBuilder()
                            .setResult("This student do not have enough money...")
                            .build();
                    responseObserver.onNext(response);
                    responseObserver.onCompleted();
                }
            } else {
                BuyBookResponse response = BuyBookResponse.newBuilder()
                        .setResult("This student do not have enough money...")
                        .build();
                responseObserver.onNext(response);
                responseObserver.onCompleted();
            }
        }
        catch (NoSuchElementException e)
        {
            logger.log(Level.SEVERE, "NO book FOUND WITH THE BOOK ID :- " + bookId + " OR NO student FOUND WITH THE STUDENT ID :- " + studentId);
            responseObserver.onError(Status.NOT_FOUND.asRuntimeException());
        }
    }
}
